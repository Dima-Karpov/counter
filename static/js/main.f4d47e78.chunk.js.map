{"version":3,"sources":["App.module.css","myConst.tsx","components/Button.tsx","components/counter/Counter.tsx","redux/counter.reducer.ts","redux/store.ts","utils/localstorage-utils.ts","components/Input.tsx","components/settings/Settings.tsx","App.tsx","redux/actionCreators.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","CounterActionTypes","Button","React","memo","props","name","onClick","disable","disabled","Counter","maxValue","minValue","value","error","start","editMode","onIncClickHandler","onResetClickHandler","valueV","className","s","StartMessageStyle","ErrorStyle","EditModeStyle","MaxValueStyle","DataBlock","ButtonsBlock","initialState","ultimateValue","rootRedusers","combineReducers","counter","state","action","type","error_check","inc_counter","on_set_handler","reset_counter","handle_on_change_max","handle_on_change_min","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","Input","onChange","InputError","InputBlock","e","currentTarget","Settings","onMaxInputValueChangeHandler","onMinInputValueChangeHandler","onSetClickHandler","disableButton","App","useSelector","dispatch","useDispatch","useCallback","stringify","setItem","saveState","getState","max","handleOnChangeMaxAC","min","handleOnChangeMinAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4d47e78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2wjpf\",\"Settings\":\"App_Settings__2qXC2\",\"Input\":\"App_Input__1V1_Q\",\"Counter\":\"App_Counter__381zn\",\"DataBlock\":\"App_DataBlock__1NMjR\",\"StartMessageStyle\":\"App_StartMessageStyle__1qaRB\",\"EditModeStyle\":\"App_EditModeStyle__jDIOx\",\"ErrorStyle\":\"App_ErrorStyle__2x_-n\",\"MaxValueStyle\":\"App_MaxValueStyle__2kbMV\",\"InputBlock\":\"App_InputBlock__2wwud\",\"InputError\":\"App_InputError__KYNzh\",\"ButtonsBlock\":\"App_ButtonsBlock__2Omgf\"};","\r\nexport enum CounterActionTypes {\r\n    inc_counter = 'INC-COUNTER',\r\n    reset_counter = 'RESET-COUNTER',\r\n    handle_on_change_max = 'HANDLE-ON-CHANGE-MAX',\r\n    handle_on_change_min = 'HANDLE-ON-CHANGE-MIN',\r\n    set_counter_local_storage = 'SET-COUNTER-LOCAL-STORAGE',\r\n    error_check = 'ERROR-CHECK',\r\n    on_set_handler =\"ON-SET-HANDLER\",\r\n}","import React from \"react\";\r\nimport { MouseEventHandler } from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick: MouseEventHandler<HTMLButtonElement>\r\n    disable: boolean\r\n}\r\n\r\nexport const Button = React.memo((props: ButtonPropsType) => {\r\n\r\n    const {\r\n        name,\r\n        onClick,\r\n        disable,\r\n    } = props\r\n\r\n    return (\r\n        <button\r\n            disabled={disable}\r\n            onClick={onClick}\r\n        >{name}</button>\r\n    );\r\n});\r\n\r\n","import React, { MouseEventHandler } from 'react'\r\nimport s from '../../App.module.css';\r\nimport { Button } from '../Button';\r\n\r\ntype PropsType = {\r\n    maxValue: number\r\n    minValue: number\r\n    value: number\r\n    error: boolean\r\n    start: boolean\r\n    editMode: boolean\r\n    onIncClickHandler: MouseEventHandler<HTMLButtonElement>\r\n    onResetClickHandler: MouseEventHandler<HTMLButtonElement>\r\n}\r\n\r\nexport const Counter = React.memo((props: PropsType) => {\r\n    const {\r\n        maxValue,\r\n        minValue,\r\n        value,\r\n        error,\r\n        start,\r\n        editMode,\r\n        onIncClickHandler,\r\n        onResetClickHandler,\r\n    } = props;\r\n    \r\n    const valueV =\r\n        start ? 'HELLO! Enter start value and press \\'SET\\''\r\n            : (editMode ? (error ? 'Enter correct value and press \\'SET\\'': 'Press \\'SET\\'') : value);\r\n\r\n            \r\n    const className = (start ? s.StartMessageStyle :\r\n        (editMode ?\r\n            error ? s.ErrorStyle : s.EditModeStyle :\r\n            value === maxValue ? s.MaxValueStyle : ''\r\n        ));\r\n\r\n    return (\r\n        <div className={s.Counter}>\r\n            <div  className={`${className} ${s.DataBlock}`}>\r\n                {valueV}\r\n            </div>\r\n            <div className={s.ButtonsBlock}>\r\n            <Button\r\n                disable={error || editMode || value >= maxValue}\r\n                onClick={onIncClickHandler}\r\n                name={'inc'}\r\n            />\r\n            <Button\r\n                disable={editMode || value === minValue}\r\n                onClick={onResetClickHandler}\r\n                name={'reset'}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n});","import { CounterActionTypes } from \"../myConst\";\r\nimport { increaseCountAC,\r\n            resetCountAC,\r\n            handleOnChangeMaxAC,\r\n            handleOnChangeMinAC,\r\n            errorCheckerAC,\r\n            onSetHandlerAC} from \"./actionCreators\";\r\n\r\nconst initialState = {\r\n    maxValue: 0, \r\n    minValue: 0,\r\n    value: 0,\r\n    editMode: false,\r\n    error: false,\r\n    ultimateValue: 0,\r\n    start: true,\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport type IncreaseCountAT = ReturnType<typeof increaseCountAC>\r\n    | ReturnType<typeof resetCountAC>\r\n    | ReturnType<typeof handleOnChangeMaxAC>\r\n    | ReturnType<typeof handleOnChangeMinAC>\r\n    | ReturnType<typeof errorCheckerAC>\r\n    | ReturnType<typeof onSetHandlerAC>\r\n\r\n\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: IncreaseCountAT): InitialStateType => {\r\n    switch (action.type) {\r\n        case CounterActionTypes.error_check:{\r\n            if (state.maxValue <= state.minValue\r\n                || state.maxValue <= 0\r\n                || state.minValue < 0){\r\n                return { ...state, error: true }\r\n            }else {\r\n                return { ...state, error: false }\r\n            }}\r\n        case CounterActionTypes.inc_counter:{\r\n            return {\r\n                ...state,\r\n                value: state.value + 1,\r\n            }}\r\n        case CounterActionTypes.on_set_handler:{\r\n            return {\r\n                ...state, value: state.minValue, ultimateValue: state.maxValue, editMode: false\r\n            }}\r\n        case CounterActionTypes.reset_counter:{\r\n            return {\r\n                ...state,\r\n                value: state.minValue\r\n            }}\r\n        case CounterActionTypes.handle_on_change_max:{\r\n            return {\r\n                ...state,\r\n                editMode: true, maxValue: action.value, start: false\r\n            }}\r\n        case CounterActionTypes.handle_on_change_min:{\r\n            return {\r\n                ...state,\r\n                editMode: true, minValue: action.value, start: false\r\n            }}\r\n        default:\r\n            return state\r\n\r\n    };\r\n};\r\n\r\n\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { loadState, saveState } from '../utils/localstorage-utils';\r\nimport { counterReducer } from './counter.reducer';\r\n\r\nconst rootRedusers = combineReducers({\r\n    counter: counterReducer,\r\n});\r\n\r\nexport const store = createStore(rootRedusers, loadState())\r\n\r\nexport type AppStateType = ReturnType<typeof rootRedusers>","import { AppStateType } from \"../redux/store\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null){\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch(err){\r\n        return undefined\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch{\r\n        // ignore\r\n    }\r\n} ;  ","import React, { ChangeEvent } from 'react';\r\nimport s from '../App.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n    error: boolean\r\n    onChange: (value: number) => void\r\n    name: string\r\n};\r\n\r\nexport const Input = React.memo((props: PropsType) => {\r\n    const {\r\n        value,\r\n        maxValue,\r\n        minValue,\r\n        error,\r\n        onChange,\r\n        name,\r\n    } = props\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(JSON.parse(e.currentTarget.value))\r\n    };\r\n\r\n    const className = (\r\n        value < 0 || (error && maxValue === 0)\r\n    ) ? s.InputError : ((value <= minValue && error) ? s.InputError : '');\r\n\r\n    return (\r\n        <div className={s.InputBlock}>\r\n            <span>\r\n                {name}\r\n            </span>\r\n            <input\r\n                className={`${className} ${s.Input}`}\r\n                value={value}\r\n                onChange={onChangeHandler}\r\n                type='number'\r\n            >\r\n            </input>\r\n        </div>\r\n    )\r\n});","import React from 'react';\r\nimport { MouseEventHandler } from 'react';\r\nimport s from '../../App.module.css';\r\nimport { Button } from '../Button';\r\nimport { Input } from '../Input';\r\n\r\n\r\ntype PropsType = {\r\n    maxValue: number\r\n    minValue: number\r\n    onMaxInputValueChangeHandler: (max: number) => void\r\n    onMinInputValueChangeHandler: (min: number) => void\r\n    editMode : boolean\r\n    error : boolean\r\n    onSetClickHandler: MouseEventHandler<HTMLButtonElement>\r\n}\r\n\r\n\r\nexport const Settings = React.memo((props: PropsType) => {\r\n    const {\r\n        maxValue,\r\n        minValue,\r\n        onMaxInputValueChangeHandler,\r\n        onMinInputValueChangeHandler,\r\n        editMode,\r\n        error,\r\n        onSetClickHandler,\r\n    } = props;\r\n\r\n   const disableButton = !editMode || error || minValue < 0 || maxValue < 0;\r\n\r\n    return (\r\n        <div className={s.Settings}>\r\n            <div className={s.DataBlock}>\r\n                <Input\r\n                    value={maxValue}\r\n                    maxValue={maxValue}\r\n                    minValue={minValue}\r\n                    error={error}\r\n                    onChange={onMaxInputValueChangeHandler}\r\n                    name={'max value'}\r\n\r\n                 />\r\n                <Input\r\n                    value={minValue}\r\n                    maxValue={maxValue}\r\n                    minValue={minValue}\r\n                    error={error}\r\n                    onChange={onMinInputValueChangeHandler}\r\n                    name={'min value'}\r\n\r\n                 />\r\n            </div>\r\n            <div className={s.ButtonsBlock}>\r\n                <Button\r\n                    disable={disableButton} \r\n                    onClick={onSetClickHandler}\r\n                    name={'set'}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n});","import React from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from './App.module.css';\r\nimport { Counter } from './components/counter/Counter';\r\nimport { AppStateType, store } from './redux/store';\r\nimport { increaseCountAC, onSetHandlerAC, handleOnChangeMaxAC, handleOnChangeMinAC, resetCountAC } from './redux/actionCreators';\r\nimport { saveState } from './utils/localstorage-utils';\r\nimport { Settings } from './components/settings/Settings';\r\n\r\nexport const App = () => {\r\n\r\n  const {\r\n    maxValue,\r\n    minValue,\r\n    value,\r\n    editMode,\r\n    error,\r\n    start,\r\n  } = useSelector((state: AppStateType) => state.counter);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSetClickHandler = useCallback(() => {\r\n    dispatch(onSetHandlerAC())\r\n    saveState({\r\n      counter: store.getState().counter\r\n    })\r\n  }, [dispatch]);\r\n\r\n  const onIncClickHandler = useCallback(() => {\r\n    dispatch(increaseCountAC())\r\n  }, [dispatch]);\r\n\r\n  const onResetClickHandler = useCallback(() => {\r\n    dispatch(resetCountAC())\r\n  }, [dispatch]);\r\n\r\n  const onMaxInputValueChangeHandler = useCallback((max: number) => {\r\n    dispatch (handleOnChangeMaxAC(max))\r\n  }, [dispatch]); \r\n\r\n  const onMinInputValueChangeHandler = useCallback((min: number) => {\r\n    dispatch (handleOnChangeMinAC(min))\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={s.App}>\r\n      <Counter\r\n        value={value}\r\n        error={error}\r\n        editMode={editMode}\r\n        maxValue={maxValue}\r\n        minValue={minValue}\r\n        onIncClickHandler={onIncClickHandler}\r\n        onResetClickHandler={onResetClickHandler}\r\n        start={start}\r\n      />\r\n      <Settings\r\n      maxValue={maxValue}\r\n      minValue={minValue}\r\n      onMaxInputValueChangeHandler={onMaxInputValueChangeHandler}\r\n      onMinInputValueChangeHandler={onMinInputValueChangeHandler}\r\n      editMode={editMode}\r\n      error={error}\r\n      onSetClickHandler={onSetClickHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","import { CounterActionTypes } from \"../myConst\";\r\n\r\nexport const increaseCountAC = () => {\r\n    return {\r\n        type: CounterActionTypes.inc_counter,\r\n    } as const\r\n};\r\nexport const resetCountAC = () => {\r\n    return {\r\n        type: CounterActionTypes.reset_counter,\r\n    } as const\r\n};\r\n\r\nexport const handleOnChangeMaxAC = (value: number) => {\r\n    return {\r\n        type: CounterActionTypes.handle_on_change_max,\r\n        value,\r\n    } as const\r\n};\r\nexport const handleOnChangeMinAC = (value: number) => {\r\n    return {\r\n        type: CounterActionTypes.handle_on_change_min,\r\n        value,\r\n    } as const\r\n};\r\n\r\nexport const errorCheckerAC = () => {\r\n    return {\r\n        type: CounterActionTypes.error_check\r\n    } as const\r\n};\r\nexport const onSetHandlerAC = () => {\r\n    return {\r\n        type: CounterActionTypes.on_set_handler\r\n    } as const\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from '../src/redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}